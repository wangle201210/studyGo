// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/wangle201210/studyGo/tools/bilibili/model"
)

func newInfo(db *gorm.DB) info {
	_info := info{}

	_info.infoDo.UseDB(db)
	_info.infoDo.UseModel(&model.Info{})

	tableName := _info.infoDo.TableName()
	_info.ALL = field.NewAsterisk(tableName)
	_info.ID = field.NewInt32(tableName, "id")
	_info.Mid = field.NewInt32(tableName, "mid")
	_info.ArchiveView = field.NewInt64(tableName, "archive_view")
	_info.Likes = field.NewInt64(tableName, "likes")
	_info.CreatedAt = field.NewTime(tableName, "created_at")
	_info.UpdatedAt = field.NewTime(tableName, "updated_at")

	_info.fillFieldMap()

	return _info
}

type info struct {
	infoDo infoDo

	ALL         field.Asterisk
	ID          field.Int32
	Mid         field.Int32 // 用户id
	ArchiveView field.Int64 // 播放数
	Likes       field.Int64 // 获赞数
	CreatedAt   field.Time  // 创建时间
	UpdatedAt   field.Time  // 更新时间

	fieldMap map[string]field.Expr
}

func (i info) Table(newTableName string) *info {
	i.infoDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i info) As(alias string) *info {
	i.infoDo.DO = *(i.infoDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *info) updateTableName(table string) *info {
	i.ALL = field.NewAsterisk(table)
	i.ID = field.NewInt32(table, "id")
	i.Mid = field.NewInt32(table, "mid")
	i.ArchiveView = field.NewInt64(table, "archive_view")
	i.Likes = field.NewInt64(table, "likes")
	i.CreatedAt = field.NewTime(table, "created_at")
	i.UpdatedAt = field.NewTime(table, "updated_at")

	i.fillFieldMap()

	return i
}

func (i *info) WithContext(ctx context.Context) *infoDo { return i.infoDo.WithContext(ctx) }

func (i info) TableName() string { return i.infoDo.TableName() }

func (i info) Alias() string { return i.infoDo.Alias() }

func (i *info) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *info) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 6)
	i.fieldMap["id"] = i.ID
	i.fieldMap["mid"] = i.Mid
	i.fieldMap["archive_view"] = i.ArchiveView
	i.fieldMap["likes"] = i.Likes
	i.fieldMap["created_at"] = i.CreatedAt
	i.fieldMap["updated_at"] = i.UpdatedAt
}

func (i info) clone(db *gorm.DB) info {
	i.infoDo.ReplaceDB(db)
	return i
}

type infoDo struct{ gen.DO }

func (i infoDo) Debug() *infoDo {
	return i.withDO(i.DO.Debug())
}

func (i infoDo) WithContext(ctx context.Context) *infoDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i infoDo) ReadDB() *infoDo {
	return i.Clauses(dbresolver.Read)
}

func (i infoDo) WriteDB() *infoDo {
	return i.Clauses(dbresolver.Write)
}

func (i infoDo) Clauses(conds ...clause.Expression) *infoDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i infoDo) Returning(value interface{}, columns ...string) *infoDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i infoDo) Not(conds ...gen.Condition) *infoDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i infoDo) Or(conds ...gen.Condition) *infoDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i infoDo) Select(conds ...field.Expr) *infoDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i infoDo) Where(conds ...gen.Condition) *infoDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i infoDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *infoDo {
	return i.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (i infoDo) Order(conds ...field.Expr) *infoDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i infoDo) Distinct(cols ...field.Expr) *infoDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i infoDo) Omit(cols ...field.Expr) *infoDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i infoDo) Join(table schema.Tabler, on ...field.Expr) *infoDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i infoDo) LeftJoin(table schema.Tabler, on ...field.Expr) *infoDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i infoDo) RightJoin(table schema.Tabler, on ...field.Expr) *infoDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i infoDo) Group(cols ...field.Expr) *infoDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i infoDo) Having(conds ...gen.Condition) *infoDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i infoDo) Limit(limit int) *infoDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i infoDo) Offset(offset int) *infoDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i infoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *infoDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i infoDo) Unscoped() *infoDo {
	return i.withDO(i.DO.Unscoped())
}

func (i infoDo) Create(values ...*model.Info) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i infoDo) CreateInBatches(values []*model.Info, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i infoDo) Save(values ...*model.Info) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i infoDo) First() (*model.Info, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Info), nil
	}
}

func (i infoDo) Take() (*model.Info, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Info), nil
	}
}

func (i infoDo) Last() (*model.Info, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Info), nil
	}
}

func (i infoDo) Find() ([]*model.Info, error) {
	result, err := i.DO.Find()
	return result.([]*model.Info), err
}

func (i infoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Info, err error) {
	buf := make([]*model.Info, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i infoDo) FindInBatches(result *[]*model.Info, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i infoDo) Attrs(attrs ...field.AssignExpr) *infoDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i infoDo) Assign(attrs ...field.AssignExpr) *infoDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i infoDo) Joins(fields ...field.RelationField) *infoDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i infoDo) Preload(fields ...field.RelationField) *infoDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i infoDo) FirstOrInit() (*model.Info, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Info), nil
	}
}

func (i infoDo) FirstOrCreate() (*model.Info, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Info), nil
	}
}

func (i infoDo) FindByPage(offset int, limit int) (result []*model.Info, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i infoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i infoDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i infoDo) Delete(models ...*model.Info) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *infoDo) withDO(do gen.Dao) *infoDo {
	i.DO = *do.(*gen.DO)
	return i
}
